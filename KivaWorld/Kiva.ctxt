#BlueJ class context
comment0.target=Kiva
comment0.text=\r\n\ <tt>Kiva</tt>\ represents\ an\ industrial-sized\ roomba\ that\ travels\ orthoganally\ on\ AR\ floors\ and\ interacts\ with\ Pods\ that\ contain\ product\ for\ picking/stowing.\r\n\ The\ Kiva\ class\ holds\ information\ about\ its\ current\ position,\ the\ direction\ it\ is\ facing,\ the\ environemt\ it\ itself\ is\ standing\ on,\r\n\ the\ lifespan\ of\ its\ motor,\ if\ it\ currently\ is\ holding\ a\ pod\ and\ whether\ or\ not\ it\ has\ dropped\ off\ that\ pod\ at\ the\ correct\ location.<br><br>\r\n\ \r\n\ The\ <tt>Kiva</tt>\ can\ interpret\ commands\ from\ the\ user\ one\ command\ at\ a\ time,\ and\ thus,\ can\ only\ validate\ commands\ as\ it\ recieves\ them.\ Changing\r\n\ the\ orientation\ of\ the\ <tt>Kiva</tt>\ does\ not\ require\ error-checking.\ All\ orientation\ changes\ occur\ within\ the\ current\ location\ the\ <tt>Kiva</tt>\ resides\ in.\r\n\ Taking\ actions\ that\ require\ error-checking\ are\:\ <b>1)</b>\ moving\ to\ a\ new\ location\ on\ the\ map,\r\n\ <b>2)</b>\ taking\ a\ pod,\ and\ <b>3)</b>\ dropping\ a\ pod.<br><br>\r\n\ \r\n\ The\ <tt>Kiva</tt>\ can\ only\ move\ forward,\ meaning\ it\ must\ change\ its\ orientation\ to\ face\ the\ direction\ the\ user\ wants\ it\ to\ travel.\ When\ it\ attempts\ to\ move\r\n\ it\ first\ has\ to\ check\ if\ that\ movement\ is\ to\ an\ "empty"\ location.\ For\ the\ sake\ of\ the\ <tt>Kiva</tt>\ locations\ marked\ as\ having\ a\ POD\ or\ a\ DROP_ZONE\ are\r\n\ considered\ to\ be\ empty.\ If\ it\ attempts\ to\ move\ into\ a\ space\ containing\ an\ OBSTACLE\ or\ that\ is\ outside\ the\ the\ dimensions\ of\ the\ map,\ an\ exception\ will\ be\ thrown.\r\n\ Holding\ a\ Pod\ while\ moving\ into\ a\ POD\ location\ similarly\ throws\ an\ exception.\ If\ a\ move\ action\ is\ successful,\ it\ affects\ the\ lifetime\ of\ the\ motor.<br><br>\r\n\ \r\n\ Taking\ and\ dropping\ Pods\ require\ checking\ the\ <tt>FloorMapObject</tt>\ at\ the\ <tt>Point</tt>\ the\ <tt>Kiva</tt>\ is\ currently\ at.\ <tt>Kiva</tt>s\ cannot\ TAKE\ Pods\r\n\ from\ non-POD\ locations.\ Following\ this\ logic,\ performing\ a\ DROP\ action\ at\ non-DROP_ZONE\ locations\ or\ when\ it\ is\ not\ holding\ a\ Pod\ is\ also\ illegal.\ These\r\n\ conditions\ throw\ exceptions.\ If\ these\ actions\ are\ successful,\ they\ do\ not\ affect\ the\ lifetime\ of\ the\ motor.<br><br>\r\n\ \r\n\ \r\n\ @author\ Franz\ Jacob\ Hernandez\ (herfrn@amazon.com)\ \r\n\ @version\ 0.21\r\n\ @since\ 10-03-2021\r\n
comment1.params=map
comment1.target=Kiva(FloorMap)
comment1.text=\r\n\ Class\ Constructor.\r\n\ Initializes\ class\ fields.\r\n\ \r\n\ @param\ map\ \ \ Takes\ a\ FloorMap\ object.\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ This\ is\ needed\ to\ assign\ values\ to\ other\ class\ fields.\r\n
comment10.params=
comment10.target=void\ incrementMotorLifetime()
comment10.text=\r\n\ increases\ the\ field\ motorLifetime\ by\ 1000\ each\ time\ it\ is\ called.\r\n
comment11.params=
comment11.target=boolean\ isCarryingPod()
comment11.text=\r\n\ A\ state\ for\ whether\ or\ not\ the\ Kiva\ instance\ has\ successfully\ called\ the\ takePod()\ method\ on\ a\ Pod\ location.\r\n\ @see\ \#takePod\r\n\ @return\ boolean\ value\ for\ class\ field\ carryingPod\r\n
comment12.params=
comment12.target=boolean\ isSuccessfullyDropped()
comment12.text=\r\n\ A\ state\ for\ whether\ or\ not\ the\ Kiva\ instance\ has\ successfully\ called\ the\ dropPod()\ method\ on\ a\ Drop\ location.\r\n\ @see\ \#dropPod\r\n\ @return\ boolean\ value\ for\ class\ field\ successfullyDropped\r\n
comment13.params=
comment13.target=edu.duke.Point\ getCurrentLocation()
comment13.text=\r\n\ The\ current\ location\ of\ the\ Kiva,\ represented\ by\ a\ Point\ object\ in\ (x,\ y)\ coordinates.\r\n\ @see\ <a\ href\="https\://www.dukelearntoprogram.com/course2/doc/javadoc/edu/duke/Point.html">edu.duke.Point</a>\r\n\ @return\ a\ Point\ object\r\n
comment14.params=
comment14.target=FacingDirection\ getDirectionFacing()
comment14.text=\r\n\ The\ current\ direction\ (enum)\ that\ the\ Kiva\ is\ facing\:\ UP,\ DOWN,\ LEFT,\ or\ RIGHT.\r\n\ @return\ a\ direction\ facing\ (enum)\r\n
comment15.params=
comment15.target=FloorMap\ getMap()
comment15.text=\r\n\ The\ map\ object\ that\ the\ Kiva\ will\ be\ traversing.\r\n\ Also\ contains\ information\ about\ the\ Pod,\ DropZone,\ and\ Obstacles.\r\n\ @return\ a\ FloorMap\ object\r\n
comment16.params=
comment16.target=long\ getMotorLifetime()
comment16.text=\r\n\ The\ lifetime\ of\ the\ Kiva\ motor,\ represented\ by\ a\ (long)\ value\ in\ milliseconds.\r\n\ The\ motor\ is\ rated\ to\ last\ 20,000\ hours.\ which\ is\ equivalent\ to\ 72\ billion\ milliseconds.\r\n\ @return\ a\ long\ value\ in\ milliseconds\r\n
comment2.params=map\ currentLocation
comment2.target=Kiva(FloorMap,\ edu.duke.Point)
comment2.text=\r\n\ Overloaded\ Class\ Constructor.\r\n\ Initializes\ class\ fields\ by\ calling\ the\ other\ class\ constructor\ with\ the\ map\ parameter.\r\n\ All\ things\ are\ the\ same\ as\ the\ other\ constructor,\ but\ the\ user\ can\ specify\ where\ on\ the\ map\ the\ Kiva\ starts.\r\n\ \r\n\ @param\ map\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Takes\ a\ FloorMap\ object.\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ This\ is\ needed\ to\ assign\ values\ to\ other\ class\ fields.\r\n\ @param\ currentLocation\ \ \ Custom\ initial\ starting\ location.\r\n
comment3.params=command
comment3.target=void\ move(KivaCommand)
comment3.text=\r\n\ Makes\ the\ Kiva\ perform\ actions\ based\ on\ the\ given\ command.\r\n\ Acts\ as\ a\ traffic\ controller\ for\ the\ user's\ commands.\ Calls\ different\ helper\ functions\ based\ on\ the\ enum\ that\ is\ passed\ as\ a\ parameter.\r\n\ If\ all\ checks\ pass\ and\ the\ move\ is\ successful,\ the\ field\ motorLifetime\ is\ incremented.\r\n\ \r\n\ @see\ \#moveForward\r\n\ @see\ \#moveLeft\r\n\ @see\ \#moveRight\r\n\ @see\ \#takePod\r\n\ @see\ \#dropPod\r\n\ @see\ \#incrementMotorLifetime\r\n\ \r\n\ @param\ command\ \ \ a\ KivaCommand\ enum.\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Must\ be\ the\ enum\ itself,\ not\ the\ char\ value\ associated\ with\ it.\r\n
comment4.params=x\ y
comment4.target=void\ validMove(int,\ int)
comment4.text=\r\n\ Validates\ whether\ or\ not\ the\ next\ move\ the\ Kiva\ is\ attempting\ to\ make\ is\ a\ legal\ one.\r\n\ If\ it\ is\ legal,\ the\ Kiva\ performs\ the\ move.\r\n\ If\ it\ is\ illegal,\ code\ execution\ stops\ and\ throws\ an\ IllegalMoveException.\r\n\ This\ is\ a\ helper\ function\ to\ the\ moveForward()\ method.\r\n\ \r\n\ @see\ \#moveForward\r\n\ @param\ x\ \ \ \ \ the\ x-coordinate\ of\ the\ Point\ Kiva\ is\ attempting\ to\ move\ to\r\n\ @param\ y\ \ \ \ \ the\ y-coordinate\ of\ the\ Point\ Kiva\ is\ attempting\ to\ move\ to\r\n\ \r\n
comment5.params=
comment5.target=void\ moveForward()
comment5.text=\r\n\ The\ Kiva\ attempts\ to\ go\ to\ a\ new\ location\ based\ off\ the\ current\ value\ of\ directionFacing.\r\n\ LEFT\ and\ RIGHT\ values\ move\ the\ Kiva\ along\ the\ x-axis,\ while\ UP\ and\ DOWN\ values\ move\ it\ along\ the\ y-axis.\r\n\ validMove()\ is\ called\ within\ this\ method\ to\ determine\ if\ the\ new\ location\ the\ Kiva\ is\ attempting\ to\ move\ to\ is\ legal.\r\n\ This\ is\ a\ helper\ function\ of\ the\ move()\ method.\r\n\ \r\n\ @see\ \#validMove\r\n\ @see\ \#move\r\n
comment6.params=
comment6.target=void\ moveLeft()
comment6.text=\r\n\ Kiva\ TURNS\ LEFT\ to\ a\ new\ direction\ based\ off\ the\ current\ value\ of\ class\ field\ directionFacing.\r\n\ This\ does\ NOT\ move\ the\ Kiva\ to\ a\ new\ location,\ only\ changes\ the\ orientation\ that\ it\ is\ facing\ within\ the\ same\ location.\r\n\ This\ is\ a\ helper\ function\ of\ the\ move()\ method.\r\n\ \r\n\ @see\ \#move\r\n
comment7.params=
comment7.target=void\ moveRight()
comment7.text=\r\n\ Kiva\ TURNS\ RIGHT\ to\ a\ new\ direction\ based\ off\ the\ current\ value\ of\ class\ field\ directionFacing.\r\n\ This\ does\ NOT\ move\ the\ Kiva\ to\ a\ new\ location,\ only\ changes\ the\ orientation\ that\ it\ is\ facing\ within\ the\ same\ location.\r\n\ This\ is\ a\ helper\ function\ of\ the\ move()\ method.\r\n\ \r\n\ @see\ \#move\r\n
comment8.params=
comment8.target=void\ takePod()
comment8.text=\r\n\ Kiva\ attempts\ to\ TAKE\ a\ Pod\ at\ the\ coordinates\ of\ currentLocation.\r\n\ If\ successful,\ the\ field\ carryingPod\ becomes\ true\ and\ code\ execution\ continues.\r\n\ Otherwise,\ a\ NoPodException\ is\ thrown.\r\n
comment9.params=
comment9.target=void\ dropPod()
comment9.text=\r\n\ Kiva\ attempts\ to\ DROP\ a\ Pod\ at\ the\ coordinates\ of\ currentLocation.\r\n\ If\ successful,\ the\ field\ successfullyDropped\ becomes\ true\ and\ code\ execution\ continues.\r\n\ Otherwise,\ a\ NoPodException\ exception\ or\ an\ IllegalDropZone\ exception\ is\ thrown.\r\n
numComments=17
