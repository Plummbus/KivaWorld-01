#BlueJ class context
comment0.target=KivaMoveTest
comment0.text=\r\n\ Test\ class\ for\ the\ methods\ in\ the\ <tt>Kiva</tt>\ class.\ Tests\ are\ focused\ on\ verifying\ in\ move\ methods\ take\ Kiva\ to\ the\ correct\ location\ and\ orientation,\ as\ \r\n\ well\ as\ verifying\ if\ non-movement\ actions\ affect\ <tt>Kiva</tt>'s\ class\ fields\ in\ the\ expected\ way.\ There\ is\ also\ exception\ throwing\ testing\ for\ both\r\n\ movement\ and\ non-movement\ actions\ the\ <tt>Kiva</tt>\ can\ perform.\r\n\ \r\n\ @author\ Franz\ Jacob\ Hernandez\ (herfrn@amazon.com)\ \r\n\ @version\ 0.14\r\n\ @since\ 10-03-2021\r\n
comment1.params=
comment1.target=void\ showMapDimensions()
comment1.text=\r\n\ Method\ to\ help\ understand\ how\ the\ map's\ dimensions\ are\ setup.\ Displays\ a\ the\ dimensions\ to\ the\ user\ via\ the\ console.\r\n\ \r\n\ @see\ FloorMap\#getMinRowNum\r\n\ @see\ FloorMap\#getMinColNum\r\n\ @see\ FloorMap\#getMaxRowNum\r\n\ @see\ FloorMap\#getMaxColNum\r\n
comment10.params=
comment10.target=void\ testForwardWhileFacingRight()
comment10.text=\r\n\ Tests\ </tt>Kiva</tt>'s\ forward\ movement\ from\ the\ <tt>LEFT</tt>\ orientation.\ Main\ field(s)\ to\ be\ verified\ are\ the\ location\ and\ direction\ it\ is\ facing.\ Displays\ a\ message\ to\ the\ user\r\n\ via\ the\ console,\ verification\ determines\ which\ message\ is\ displayed.\ <tt>moveLeft()</tt>\ is\ called\ thrice.\r\n\ \r\n\ @see\ Kiva\#moveForward\r\n\ @see\ Kiva\#moveLeft\r\n
comment11.params=
comment11.target=void\ testTurnRightFromUp()
comment11.text=\r\n\ Tests\ </tt>Kiva</tt>'s\ ability\ to\ turn\ right.\ Main\ field(s)\ to\ be\ verified\ are\ the\ location\ and\ direction\ it\ is\ facing.\ Displays\ a\ message\ to\ the\ user\r\n\ via\ the\ console,\ verification\ determines\ which\ message\ is\ displayed.\ <tt>moveRight()</tt>\ is\ called\ once.\r\n\ \r\n\ @see\ Kiva\#moveRight\r\n
comment12.params=
comment12.target=void\ testTurnRightFromLeft()
comment12.text=\r\n\ Tests\ </tt>Kiva</tt>'s\ ability\ to\ turn\ right.\ Main\ field(s)\ to\ be\ verified\ are\ the\ location\ and\ direction\ it\ is\ facing.\ Displays\ a\ message\ to\ the\ user\r\n\ via\ the\ console,\ verification\ determines\ which\ message\ is\ displayed.\ After\ <tt>moveLeft()</tt>\ is\ called\ once,\ <tt>moveRight()</tt>\ is\ called\ once.\r\n\ \r\n\ @see\ Kiva\#moveRight\r\n\ @see\ Kiva\#moveLeft\r\n
comment13.params=
comment13.target=void\ testTurnRightFromDown()
comment13.text=\r\n\ Tests\ </tt>Kiva</tt>'s\ ability\ to\ turn\ right.\ Main\ field(s)\ to\ be\ verified\ are\ the\ location\ and\ direction\ it\ is\ facing.\ Displays\ a\ message\ to\ the\ user\r\n\ via\ the\ console,\ verification\ determines\ which\ message\ is\ displayed.\ After\ <tt>moveLeft()</tt>\ is\ called\ twice,\ <tt>moveRight()</tt>\ is\ called\ once.\r\n\ \r\n\ @see\ Kiva\#moveRight\r\n\ @see\ Kiva\#moveLeft\r\n
comment14.params=
comment14.target=void\ testTurnRightFromRight()
comment14.text=\r\n\ Tests\ </tt>Kiva</tt>'s\ ability\ to\ turn\ right.\ Main\ field(s)\ to\ be\ verified\ are\ the\ location\ and\ direction\ it\ is\ facing.\ Displays\ a\ message\ to\ the\ user\r\n\ via\ the\ console,\ verification\ determines\ which\ message\ is\ displayed.\ After\ <tt>moveLeft()</tt>\ is\ called\ thrice,\ <tt>moveRight()</tt>\ is\ called\ once.\r\n\ \r\n\ @see\ Kiva\#moveRight\r\n\ @see\ Kiva\#moveLeft\r\n
comment15.params=
comment15.target=void\ testTakeOnPod()
comment15.text=\r\n\ Tests\ </tt>Kiva</tt>'s\ ability\ to\ pick\ up\ a\ Pod.\ Main\ functionality\ that\ is\ being\ tested\ is\ <tt>Kiva</tt>'s\ takePod()\ method.\r\n\ Displays\ a\ message\ to\ the\ user\ based\ on\ whether\ or\ not\ the\ <tt>Kiva</tt>\ was\ able\ to\ pick\ up\ a\ Pod.\r\n\ \r\n\ @see\ Kiva\#takePod\r\n
comment16.params=
comment16.target=void\ testDropOnDropZone()
comment16.text=\r\n\ Tests\ </tt>Kiva</tt>'s\ ability\ to\ drop\ off\ a\ Pod.\ Main\ functionality\ that\ is\ being\ tested\ is\ <tt>Kiva</tt>'s\ dropPod()\ method.\r\n\ Displays\ a\ message\ to\ the\ user\ based\ on\ whether\ or\ not\ the\ <tt>Kiva</tt>\ was\ able\ to\ drop\ up\ a\ Pod.\r\n\ \r\n\ @see\ Kiva\#dropPod\r\n
comment17.params=
comment17.target=void\ testDropPodOnEmpty()
comment17.text=\r\n\ Tests\ </tt>Kiva</tt>'s\ exception\ handling\ for\ dropping\ Pods.\ Main\ functionality\ that\ is\ being\ tested\ is\ <tt>Kiva</tt>'s\ dropPod()\ method.\r\n\ An\ IllegalDropZoneLocation\ exception\ should\ be\ thrown\ along\ with\ a\ diagnostic\ message.\r\n\ \r\n\ @see\ Kiva\#dropPod\r\n\ @see\ IllegalDropZoneLocation\r\n
comment18.params=
comment18.target=void\ testOutOfBoundsMove()
comment18.text=\r\n\ Tests\ <tt>Kiva</tt>'s\ exception\ handling\ for\ moving\ to\ coordinates\ outside\ the\ bounds\ of\ the\ map\ dimenions.\ Main\ functionality\ being\ tested\ is\ <tt>Kiva</tt>'s\r\n\ validMove(int\ a,\ int\ b)\ method.\ There\ is\ an\ IllegalMoveException\ that\ should\ be\ thrown,\ but\ before\ the\ message's\ code\ segment\ is\ reached,\ an\r\n\ InvalidFloorMapLocationException\ is\ thrown\ instead.\r\n\ \r\n\ @see\ Kiva\#validMove(int,\ int)\r\n\ @see\ InvalidFloorMapLocationException\r\n\ @see\ IllegalMoveException\r\n
comment19.params=
comment19.target=void\ testHitObstacle()
comment19.text=\r\n\ Tests\ <tt>Kiva</tt>'s\ exception\ handling\ for\ moving\ into\ spaces\ occupied\ by\ an\ obstacle.\ Main\ functionality\ being\ tested\ is\ <tt>Kiva</tt>'s\r\n\ validMove(int\ a,\ int\ b)\ method.\ IllegalMoveException\ should\ be\ thrown\ along\ with\ a\ diagnostic\ message.\r\n\ \r\n\ @see\ Kiva\#validMove(int,\ int)\r\n\ @see\ IllegalMoveException\r\n
comment2.params=
comment2.target=void\ testDeltas()
comment2.text=\r\n\ Method\ to\ help\ understand\ what\ values\ getDelta()\ returns.\ Displays\ the\ values\ of\ each\ direction\ facing\ to\ the\ user\ via\ the\ console.\r\n\ \r\n\ @see\ FacingDirection\#getDelta\r\n
comment20.params=
comment20.target=void\ testHoldPodMoveToPod()
comment20.text=\r\n\ Tests\ <tt>Kiva</tt>'s\ exception\ handling\ for\ moving\ into\ spaces\ that\ contain\ a\ Pod\ while\ also\ holding\ a\ Pod.\ Main\ functionality\ be\ tested\ is\ <tt>Kiva</tt>'s\r\n\ validMove(int\ a,\ int\ b)\ method.\ IllegalMoveException\ should\ be\ thrown\ along\ with\ a\ dianostic\ message.\r\n\ \r\n\ @see\ Kiva\#validMove(int,\ int)\r\n\ @see\ IllegalMoveException\r\n
comment21.params=
comment21.target=void\ testDropWhenNoPod()
comment21.text=\r\n\ Tests\ <tt>Kiva</tt>'s\ exception\ handling\ for\ dropping\ a\ Pod\ when\ it\ is\ not\ carrying\ a\ Pod.\ Main\ functionality\ being\ tested\ is\ <tt>Kiva</tt>'s\ \r\n\ dropPod()\ method.\ A\ NoPodException\ should\ be\ thrown\ along\ with\ a\ diagnostic\ message.\r\n\ \r\n\ @\ Kiva\#dropPod();\r\n
comment22.params=
comment22.target=void\ testTakeFromEmpty()
comment22.text=\r\n\ Tests\ <tt>Kiva</tt>'s\ exception\ handling\ for\ picking\ up\ a\ Pod\ from\ a\ location\ that\ does\ not\ have\ a\ Pod.\ Main\ functionality\ being\ tested\ is\ <tt>Kiva</tt>'s\r\n\ takePod()\ method.\ A\ NoPodException\ should\ be\ thrown\ along\ with\ a\ diagnostic\ message.\r\n
comment23.params=a\ b
comment23.target=boolean\ sameLocation(edu.duke.Point,\ edu.duke.Point)
comment23.text=\r\n\ Helper\ function\ for\ the\ constructor\ tests.\r\n\ Lets\ us\ know\ if\ two\ Points\ are\ the\ same\ Point.\r\n\ \r\n\ @param\ a\ \ \ \ \ the\ first\ Point\ you\ wish\ to\ compare.\r\n\ @param\ b\ \ \ \ \ the\ second\ Point\ you\ wish\ to\ compare.\r\n\ \r\n\ @return\ true\ if\ parameters\ are\ equal,\ false\ if\ not\r\n
comment24.params=testName\ actual\ expectLocation\ expectDirection\ expectCarry\ expectDropped
comment24.target=void\ verifyKivaState(java.lang.String,\ Kiva,\ edu.duke.Point,\ FacingDirection,\ boolean,\ boolean)
comment24.text=\r\n\ Verifies\ the\ if\ the\ current\ instance\ of\ <tt>Kiva</tt>\ has\ the\ correct/expected\ information\ via\ a\ console\ message.\r\n\ \r\n\ @param\ testname\ \ \ \ \ \ \ \ \ \ The\ name\ of\ the\ test,\ can\ be\ anything.\r\n\ @param\ actual\ \ \ \ \ \ \ \ \ \ \ \ The\ <tt>Kiva</tt>\ instance\ that\ is\ being\ tested\r\n\ @param\ expectLocation\ \ \ \ The\ (x,\ y)\ coordinates\ the\ <tt>Kiva</tt>\ should\ be\ located\ at\r\n\ @param\ expectDirection\ \ \ The\ orientation\ the\ <tt>Kiva</tt>\ should\ be\ facing\r\n\ @param\ expectCarry\ \ \ \ \ \ \ Whether\ or\ not\ the\ <tt>Kiva</tt>\ is\ holding\ a\ Pod\r\n\ @param\ expectDropped\ \ \ \ \ Whether\ or\ not\ the\ <tt>Kiva</tt>\ has\ successfully\ dropped\ a\ Pod\ at\ a\ Drop\ Zone\r\n
comment3.params=
comment3.target=void\ testForwardFromUp()
comment3.text=\r\n\ Tests\ </tt>Kiva</tt>'s\ forward\ movement\ from\ the\ <tt>UP</tt>\ orientation.\ Main\ field(s)\ to\ be\ verified\ are\ the\ location\ and\ direction\ it\ is\ facing.\ Displays\ a\ message\ to\ the\ user\r\n\ via\ the\ console,\ verification\ determines\ which\ message\ is\ displayed.\r\n\ \r\n\ @see\ Kiva\#moveForward\r\n
comment4.params=
comment4.target=void\ testTurnLeftFromUp()
comment4.text=\r\n\ Tests\ </tt>Kiva</tt>'s\ ability\ to\ turn\ left.\ Main\ field(s)\ to\ be\ verified\ are\ the\ location\ and\ direction\ it\ is\ facing.\ Displays\ a\ message\ to\ the\ user\r\n\ via\ the\ console,\ verification\ determines\ which\ message\ is\ displayed.\ <tt>moveLeft()</tt>\ is\ called\ once.\r\n\ \r\n\ @see\ Kiva\#moveLeft\r\n\r\n
comment5.params=
comment5.target=void\ testTurnLeftFromLeft()
comment5.text=\r\n\ Tests\ </tt>Kiva</tt>'s\ ability\ to\ turn\ left.\ Main\ field(s)\ to\ be\ verified\ are\ the\ location\ and\ direction\ it\ is\ facing.\ Displays\ a\ message\ to\ the\ user\r\n\ via\ the\ console,\ verification\ determines\ which\ message\ is\ displayed.\ <tt>moveLeft()</tt>\ is\ called\ twice.\r\n\ \r\n\ @see\ Kiva\#moveLeft\r\n\r\n
comment6.params=
comment6.target=void\ testTurnLeftFromDown()
comment6.text=\r\n\ Tests\ </tt>Kiva</tt>'s\ ability\ to\ turn\ left.\ Main\ field(s)\ to\ be\ verified\ are\ the\ location\ and\ direction\ it\ is\ facing.\ Displays\ a\ message\ to\ the\ user\r\n\ via\ the\ console,\ verification\ determines\ which\ message\ is\ displayed.\ <tt>moveLeft()</tt>\ is\ called\ thrice.\r\n\ \r\n\ @see\ Kiva\#moveLeft\r\n\r\n
comment7.params=
comment7.target=void\ testTurnLeftFromRight()
comment7.text=\r\n\ Tests\ </tt>Kiva</tt>'s\ ability\ to\ turn\ left.\ Main\ field(s)\ to\ be\ verified\ are\ the\ location\ and\ direction\ it\ is\ facing.\ Displays\ a\ message\ to\ the\ user\r\n\ via\ the\ console,\ verification\ determines\ which\ message\ is\ displayed.\ <tt>moveLeft()</tt>\ is\ called\ 4\ times.\r\n\ \r\n\ @see\ Kiva\#moveLeft\r\n\r\n
comment8.params=
comment8.target=void\ testForwardWhileFacingLeft()
comment8.text=\r\n\ Tests\ </tt>Kiva</tt>'s\ forward\ movement\ from\ the\ <tt>LEFT</tt>\ orientation.\ Main\ field(s)\ to\ be\ verified\ are\ the\ location\ and\ direction\ it\ is\ facing.\ Displays\ a\ message\ to\ the\ user\r\n\ via\ the\ console,\ verification\ determines\ which\ message\ is\ displayed.\ <tt>moveLeft()</tt>\ is\ called\ once.\r\n\ \r\n\ @see\ Kiva\#moveForward\r\n\ @see\ Kiva\#moveLeft\r\n
comment9.params=
comment9.target=void\ testForwardWhileFacingDown()
comment9.text=\r\n\ Tests\ </tt>Kiva</tt>'s\ forward\ movement\ from\ the\ <tt>LEFT</tt>\ orientation.\ Main\ field(s)\ to\ be\ verified\ are\ the\ location\ and\ direction\ it\ is\ facing.\ Displays\ a\ message\ to\ the\ user\r\n\ via\ the\ console,\ verification\ determines\ which\ message\ is\ displayed.\ <tt>moveLeft()</tt>\ is\ called\ twice.\r\n\ \r\n\ @see\ Kiva\#moveForward\r\n\ @see\ Kiva\#moveLeft\r\n
numComments=25
