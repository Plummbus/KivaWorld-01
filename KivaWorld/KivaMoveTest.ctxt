#BlueJ class context
comment0.target=KivaMoveTest
comment0.text=\r\n\ Write\ a\ description\ of\ KivaMoveTest\ here.\r\n\ \r\n\ @author\ (your\ name)\ \r\n\ @version\ (a\ version\ number\ or\ a\ date)\r\n
comment1.params=
comment1.target=void\ showMapDimensions()
comment10.params=
comment10.target=void\ testForwardWhileFacingRight()
comment11.params=
comment11.target=void\ testTurnRightFromUp()
comment12.params=
comment12.target=void\ testTurnRightFromLeft()
comment13.params=
comment13.target=void\ testTurnRightFromDown()
comment14.params=
comment14.target=void\ testTurnRightFromRight()
comment15.params=
comment15.target=void\ testTakeOnPod()
comment16.params=
comment16.target=void\ testDropOnDropZone()
comment17.params=
comment17.target=void\ testDropPodOnEmpty()
comment18.params=
comment18.target=void\ testOutOfBoundsMove()
comment19.params=
comment19.target=void\ testHitObstacle()
comment2.params=
comment2.target=void\ testDeltas()
comment20.params=
comment20.target=void\ testHoldPodMoveToPod()
comment21.params=
comment21.target=void\ testDropWhenNoPod()
comment22.params=
comment22.target=void\ testTakeFromEmpty()
comment23.params=a\ b
comment23.target=boolean\ sameLocation(edu.duke.Point,\ edu.duke.Point)
comment23.text=\r\n\ Helper\ function\ for\ the\ constructor\ tests.\r\n\ Lets\ us\ know\ if\ two\ Points\ are\ the\ same\ Point.\r\n\ \r\n\ @param\ a\ \ \ \ \ the\ first\ Point\ you\ wish\ to\ compare.\r\n\ @param\ b\ \ \ \ \ the\ second\ Point\ you\ wish\ to\ compare.\r\n\ \r\n\ @return\ true\ if\ parameters\ are\ equal,\ false\ if\ not\r\n
comment24.params=testName\ actual\ expectLocation\ expectDirection\ expectCarry\ expectDropped
comment24.target=void\ verifyKivaState(java.lang.String,\ Kiva,\ edu.duke.Point,\ FacingDirection,\ boolean,\ boolean)
comment24.text=\r\n\ Verifies\ the\ if\ the\ current\ instance\ of\ <tt>Kiva</tt>\ has\ the\ correct/expected\ information\ via\ a\ console\ message.\r\n\ \r\n\ @param\ testname\ \ \ \ \ \ \ \ \ \ The\ name\ of\ the\ test,\ can\ be\ anything.\r\n\ @param\ actual\ \ \ \ \ \ \ \ \ \ \ \ The\ <tt>Kiva</tt>\ instance\ that\ is\ being\ tested\r\n\ @param\ expectLocation\ \ \ \ The\ (x,\ y)\ coordinates\ the\ <tt>Kiva</tt>\ should\ be\ located\ at\r\n\ @param\ expectDirection\ \ \ The\ orientation\ the\ <tt>Kiva</tt>\ should\ be\ facing\r\n\ @param\ expectCarry\ \ \ \ \ \ \ Whether\ or\ not\ the\ <tt>Kiva</tt>\ is\ holding\ a\ Pod\r\n\ @param\ expectDropped\ \ \ \ \ Whether\ or\ not\ the\ <tt>Kiva</tt>\ has\ successfully\ dropped\ a\ Pod\ at\ a\ Drop\ Zone\r\n
comment3.params=
comment3.target=void\ testForwardFromUp()
comment4.params=
comment4.target=void\ testTurnLeftFromUp()
comment5.params=
comment5.target=void\ testTurnLeftFromLeft()
comment6.params=
comment6.target=void\ testTurnLeftFromDown()
comment7.params=
comment7.target=void\ testTurnLeftFromRight()
comment8.params=
comment8.target=void\ testForwardWhileFacingLeft()
comment9.params=
comment9.target=void\ testForwardWhileFacingDown()
numComments=25
